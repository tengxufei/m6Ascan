// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// findMaxMean
int findMaxMean(arma::vec num, int binNum, int lengthNum);
RcppExport SEXP _m6Ascan_findMaxMean(SEXP numSEXP, SEXP binNumSEXP, SEXP lengthNumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type num(numSEXP);
    Rcpp::traits::input_parameter< int >::type binNum(binNumSEXP);
    Rcpp::traits::input_parameter< int >::type lengthNum(lengthNumSEXP);
    rcpp_result_gen = Rcpp::wrap(findMaxMean(num, binNum, lengthNum));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello
List rcpp_hello();
RcppExport SEXP _m6Ascan_rcpp_hello() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_m6Ascan_findMaxMean", (DL_FUNC) &_m6Ascan_findMaxMean, 3},
    {"_m6Ascan_rcpp_hello", (DL_FUNC) &_m6Ascan_rcpp_hello, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_m6Ascan(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
